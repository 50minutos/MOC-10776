USE master

IF EXISTS (SELECT * FROM SYS.databases WHERE name = 'DB')
BEGIN
	ALTER DATABASE DB
	SET SINGLE_USER
	WITH ROLLBACK IMMEDIATE

	DROP DATABASE DB
END

CREATE DATABASE DB
GO

USE DB

DECLARE @X1 VARCHAR(10) = 'AGNALDO'
DECLARE @X2 NVARCHAR(10) = N'AGNALDO'
DECLARE @X3 CHAR(10) = 'AGNALDO'
DECLARE @X4 NCHAR(10) = N'AGNALDO'
DECLARE @X5 VARCHAR(MAX) = 'AGNALDO'
DECLARE @X6 NVARCHAR(MAX) = N'AGNALDO'
--DECLARE @X7 TEXT = 'AGNALDO'
--DECLARE @X8 NTEXT = N'AGNALDO'

SELECT @X1, LEN(@X1), DATALENGTH(@X1)
SELECT @X2, LEN(@X2), DATALENGTH(@X2)
SELECT @X3, LEN(@X3), DATALENGTH(@X3)
SELECT @X4, LEN(@X4), DATALENGTH(@X4)
SELECT @X5, LEN(@X5), DATALENGTH(@X5)
SELECT @X6, LEN(@X6), DATALENGTH(@X6)
--SELECT @X7, LEN(@X7), DATALENGTH(@X7)
--SELECT @X8, LEN(@X8), DATALENGTH(@X8)

EXEC sp_helpsort

SELECT * 
FROM ::fn_helpcollations()
WHERE name LIKE '%LATIN%GENERAL%'

CREATE TABLE LOGIN
(
	USUARIO VARCHAR(10) COLLATE LATIN1_GENERAL_CS_AS UNIQUE, 
	SENHA VARBINARY(100)
)

SELECT PWDENCRYPT('AGNALDO')
SELECT PWDENCRYPT('AGNALDO')
SELECT PWDENCRYPT('AGNALDO')

--HASH -> REPRESENTAÇÃO NUMÉRICA DE UM DADO (MD5, SHA1, SHA128)

INSERT LOGIN 
VALUES ('AGNALDO', PWDENCRYPT('SENHA')),
	('ANA', PWDENCRYPT('MARIA'))

SELECT *
FROM LOGIN

SELECT *
FROM LOGIN
WHERE PWDCOMPARE('SENHA', SENHA) = 1 
	AND USUARIO = 'AGNALDO'

SELECT *
FROM LOGIN
WHERE PWDCOMPARE('MARIA', SENHA) = 1 
	AND USUARIO = 'ana'

--CRIPTOGRAFIA SIMÉTRICA
/*
	XOR BITS DIFERENTES => 1
	
	6 MENSAGEM ORIGINAL
	^ ALGORITMO
	2 CHAVE DE CRIPTOGRAFIA
	
	4 MENSAGEM CIFRADA
	^ ALGORITMO
	2 CHAVE

	6 MENSAGEM ORIGINAL	
*/

--CRIPTOGRAFIA ASSIMÉTRICA 
/*
	MINHA CHAVE PÚBLICA É USADA PARA CRIPTOGRAFAR A MENSAGEM NA ORIGEM
	EU USO A MINHA CHAVE PRIVADA PARA DECRIPTAR A MENSAGEM NO DESTINO
*/

SELECT 6 ^ 2 

SELECT 4 ^ 2

SELECT 6 ^ 4

CREATE TABLE PRODUTO_CS_AS
(
	COD_PRODUTO INT IDENTITY, 
	NOME_PRODUTO VARCHAR(50) COLLATE LATIN1_GENERAL_CS_AS
)

CREATE TABLE PRODUTO_CI_AI
(
	COD_PRODUTO INT IDENTITY, 
	NOME_PRODUTO VARCHAR(50) COLLATE LATIN1_GENERAL_CI_AI
)

INSERT PRODUTO_CS_AS
VALUES ('AÇÚCAR'), 
	('ACUCAR'), 
	('acucar')

INSERT PRODUTO_CI_AI
VALUES ('AÇÚCAR'), 
	('ACUCAR'), 
	('acucar')

SELECT * 
FROM PRODUTO_CS_AS
WHERE NOME_PRODUTO = 'ACUCAR'

SELECT * 
FROM PRODUTO_CI_AI
WHERE NOME_PRODUTO = 'ACUCAR'

SELECT DISTINCT NOME_PRODUTO
FROM PRODUTO_CS_AS

SELECT DISTINCT NOME_PRODUTO
FROM PRODUTO_CI_AI

SELECT *
FROM PRODUTO_CS_AS PS
JOIN PRODUTO_CI_AI PI
	ON PS.NOME_PRODUTO = PI.NOME_PRODUTO COLLATE LATIN1_GENERAL_CS_AS

SELECT *
FROM PRODUTO_CS_AS PS
JOIN PRODUTO_CI_AI PI
	ON PS.NOME_PRODUTO COLLATE LATIN1_GENERAL_CI_AI = PI.NOME_PRODUTO 

GO

CREATE TABLE PESSOA
(
	COD_PESSOA INT IDENTITY, 
	NOME_PESSOA VARCHAR(50), 
	VERSAO TIMESTAMP
)

INSERT INTO PESSOA
VALUES ('ADAM', DEFAULT)

SELECT * 
FROM PESSOA
 
UPDATE PESSOA 
SET NOME_PESSOA = 'ADÃO' 
WHERE COD_PESSOA = 1

SELECT * 
FROM PESSOA

SELECT @@DBTS AS 'ULTIMO TIMESTAMP'

EXEC sp_MSforeachtable 'DROP TABLE ?'

CREATE TABLE GEOMETRIA
(
	CAMPO GEOMETRY
)

INSERT GEOMETRIA
VALUES (GEOMETRY::STGeomFromText('LINESTRING (100 100, 20 180, 180 180, 100 100)', 0));

INSERT INTO GEOMETRIA
VALUES (GEOMETRY::STGeomFromText('POLYGON ((0 0, 150 0, 150 150, 0 150, 0 0))', 0));

INSERT INTO GEOMETRIA
VALUES ('POLYGON ((25 -20, 0 10, -25 -20, 25 -20))')

SELECT * 
FROM GEOMETRIA

CREATE TABLE VARIANT
(
	CAMPO SQL_VARIANT
)

INSERT VARIANT
VALUES (CAST(123.4567 as decimal(8,2)))

INSERT VARIANT 
VALUES (123.4567)

INSERT VARIANT 
VALUES (CAST(123 AS int))

INSERT VARIANT 
VALUES (CAST('PALAVRA' AS char(10)))

INSERT VARIANT 
VALUES ('PALAVRA')

INSERT VARIANT 
VALUES (CAST(GETDATE() AS smalldatetime))

INSERT VARIANT 
VALUES (CAST('SENHA' AS binary))

SELECT * FROM VARIANT

SELECT *, 
	SQL_VARIANT_PROPERTY(CAMPO, 'BASETYPE') AS 'BASETYPE',
	SQL_VARIANT_PROPERTY(CAMPO, 'MAXLENGTH') AS 'MAXLENGTH',
	SQL_VARIANT_PROPERTY(CAMPO, 'PRECISION') AS 'PRECISION',
	SQL_VARIANT_PROPERTY(CAMPO, 'SCALE') AS 'SCALE',
	SQL_VARIANT_PROPERTY(CAMPO, 'TOTALBYTES') AS 'TOTALBYTES',
	SQL_VARIANT_PROPERTY(CAMPO, 'COLLATION') AS 'COLLATION'
FROM VARIANT

CREATE TABLE TABELA_A
(
	COD_TABELA UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(), 
	CONTEUDO_TABELA VARCHAR(50)
)

CREATE TABLE TABELA_B
(
	COD_TABELA UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWSEQUENTIALID(), 
	CONTEUDO_TABELA VARCHAR(50)
)

DECLARE @INI DATETIME2 = SYSDATETIME()

DECLARE @I INT = 1

WHILE @I <= 100000
BEGIN
	INSERT TABELA_A
	VALUES (DEFAULT, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')

	SET @I += 1
END

DECLARE @FIM DATETIME2 = SYSDATETIME()

SELECT DATEDIFF(MS, @INI, @FIM)

GO

DECLARE @INI DATETIME2 = SYSDATETIME()

DECLARE @I INT = 1

WHILE @I <= 100000
BEGIN
	INSERT TABELA_B
	VALUES (DEFAULT, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')

	SET @I += 1
END

DECLARE @FIM DATETIME2 = SYSDATETIME()

SELECT DATEDIFF(MS, @INI, @FIM)

EXEC sp_spaceused TABELA_A
EXEC sp_spaceused TABELA_B

DBCC SHOWCONTIG('TABELA_A')
DBCC SHOWCONTIG('TABELA_B')

DBCC DBREINDEX('TABELA_A')
DBCC DBREINDEX('TABELA_B')

DBCC SHOWCONTIG('TABELA_A')
DBCC SHOWCONTIG('TABELA_B')

GO

DECLARE @X INT = 10
DECLARE @Y INT = 20

--SELECT @X + @Y, CONVERT(VARCHAR, @X) + CONVERT(VARCHAR, @Y)

DECLARE @S VARCHAR(10) = '1234'

--SELECT @X + CONVERT(INT, @S)

--SELECT CONVERT(VARCHAR, GETDATE()), CAST(GETDATE() AS VARCHAR)

--SELECT CONVERT(VARCHAR, GETDATE(), 103), 
--	CONVERT(VARCHAR, GETDATE(), 108)

SELECT @X/@Y, 
	CAST(@X AS REAL)/@Y, 
	CAST(@X AS FLOAT)/@Y, 
	CAST(@X AS MONEY)/@Y, 
	CAST(@X AS DEC(16,3))/@Y

SELECT GETDATE(), 
	SYSDATETIME(), 
	GETUTCDATE(), 
	SYSUTCDATETIME(), 
	SYSDATETIMEOFFSET()

SELECT 
	CONVERT(TIME, GETDATE()) AS TIME, 
	CONVERT(TIME, GETUTCDATE()) AS TIME_UTC, 
	CONVERT(DATE, GETDATE()) AS DATE, 
	CONVERT(SMALLDATETIME, GETDATE()) AS SMALLDATETIME, 
	CONVERT(DATETIME, GETDATE()) AS DATETIME, 
	CONVERT(DATETIME2, SYSDATETIME()) AS DATETIME2, 
	CONVERT(DATETIME2, SYSUTCDATETIME()) AS DATETIME2_UTC, 
	CONVERT(DATETIMEOFFSET, SYSDATETIMEOFFSET()) AS DATETIMEOFFSET

----------------------------------
--EXTRAIR PARTE OU NOME
----------------------------------

SELECT DATENAME(MM, GETDATE()) AS MES,
	DATENAME(DW, GETDATE()) AS DIA_DA_SEMANA

SELECT DATEPART(YY, SYSDATETIME()) AS ANO,
	DATEPART(M, SYSDATETIME()) AS MES,
	DATEPART(D, SYSDATETIME()) AS DIA,
	DATEPART(HH, SYSDATETIME()) AS HORA,
	DATEPART(N, SYSDATETIME()) AS MINUTO,
	DATEPART(S, SYSDATETIME()) AS SEGUNDO,
	DATEPART(MS, SYSDATETIME()) AS MILISSEGUNDO,
	DATEPART(MCS, SYSDATETIME()) AS MICROSSEGUNDO,
	DATEPART(NS, SYSDATETIME()) AS NANOSSEGUNDO,
	DATEPART(Q, SYSDATETIME()) AS TRIMESTRE,
	DATEPART(ISOWK, SYSDATETIME()) AS SEMANA,
	DATEPART(DY, SYSDATETIME()) AS DIA_DO_ANO, 
	DATEPART(DW, SYSDATETIME()) AS DIA_DA_SEMANA 


SELECT DATEADD(DD, 30, GETDATE()),
	DATEADD(DD, -30, GETDATE()), 
	DATEADD(DD, 20000, '19660912')

SELECT 
	TIMEFROMPARTS(9, 10, 11, 1, 7) AS TIME, 
	DATEFROMPARTS(2013, 2, 20) AS DATE, 
	SMALLDATETIMEFROMPARTS(2013, 2, 20, 9, 10) AS SMALLDATETIME, 
	DATETIMEFROMPARTS(2013, 2, 20, 9, 10, 11, 1) AS DATETIME, 
	DATETIME2FROMPARTS(2013, 2, 20, 9, 10, 11, 1, 7) AS DATETIME2, 
	DATETIMEOFFSETFROMPARTS(2013, 2, 20, 9, 10, 11, 1, -3, 0, 7) AS DATETIMEOFFSET

----------------------------------
--DIFERENÇA ENTRE DATAS
----------------------------------

SELECT 
	DATEDIFF(YY, CONVERT(DATETIME, '19660912'), GETDATE()), 
	DATEDIFF(MM, CONVERT(DATETIME, '19660912'), GETDATE()), 
	DATEDIFF(DD, CONVERT(DATETIME, '19660912'), GETDATE())

SELECT 
	EOMONTH(GETDATE(), -1) AS ANTERIOR, 
	EOMONTH(GETDATE(), 0) AS ATUAL, 
	EOMONTH(GETDATE(), 1) AS PROXIMO 

DECLARE @D DATETIMEOFFSET = SYSDATETIMEOFFSET()

SELECT
	@D, 
	SWITCHOFFSET(@D, '-01:00'), 
	SWITCHOFFSET(@D, '+00:00'), 
	SWITCHOFFSET(@D, '+03:00')

DECLARE @HOJE DATETIME2 = SYSDATETIME()

SELECT 
	@HOJE, 
	TODATETIMEOFFSET (@HOJE, -60), 
	TODATETIMEOFFSET (@HOJE, -120), 
	TODATETIMEOFFSET (@HOJE, '-03:00') 

SELECT 
	@@DATEFIRST, 
	DATEPART(DW, GETDATE())

SET DATEFIRST 2

SELECT 
	@@DATEFIRST, 
	DATEPART(DW, GETDATE())

SET DATEFIRST 7

SET DATEFORMAT DMY

SELECT 
	CONVERT(DATETIME, '12/02/2013')

SET DATEFORMAT MDY

SELECT 
	CONVERT(DATETIME, '12/02/2013')
	
SELECT 
	CONVERT(DATETIME, '20130212')

SELECT 
	@@LANGUAGE

EXEC SP_HELPLANGUAGE

SELECT * 
FROM SYS.syslanguages

SET LANGUAGE 'Brazilian'

SELECT 
	1/0

SELECT 
	CONVERT(DATETIME, '12/02/2013')

SELECT 
	DATENAME(DW, GETDATE())

SET LANGUAGE US_ENGLISH

SELECT ISDATE(GETDATE()), 
	ISDATE('BATATINHA')

CREATE TABLE DATAS
(
	SMALLDATETIME SMALLDATETIME, 
	DATETIME DATETIME, 
	DATETIMEOFFSET DATETIMEOFFSET, 
	DATETIME2 DATETIME2,
	DATE DATE, 
	TIME TIME
)

INSERT DATAS 
VALUES 
(
	SYSDATETIMEOFFSET(), 
	SYSDATETIMEOFFSET(), 
	SYSDATETIMEOFFSET(), 
	SYSDATETIMEOFFSET(), 
	SYSDATETIMEOFFSET(), 
	SYSDATETIMEOFFSET()
)

SELECT * 
FROM DATAS

CREATE TABLE NUMEROS
(
	TINYINT TINYINT, 
	SMALLINT SMALLINT, 
	INT INT, 
	BIGINT BIGINT, 
	DEC31 DEC(3, 1), --99,9
	DEC42 DEC(4, 2), --99,99
	DEC51 DEC(5, 1), --9999,9
	SMALLMONEY SMALLMONEY, 
	MONEY MONEY
)
 
INSERT NUMEROS
VALUES (1, 1, 1, 1, 1, 1, 1, 1, 1)

SELECT * 
FROM NUMEROS

EXEC SP_HELP NUMEROS

CREATE TABLE TEXTOS
(
	VARCHAR VARCHAR(10), 
	CHAR CHAR(10), 
	NVARCHAR NVARCHAR(10), 
	NCHAR NCHAR(10), 
	TEXT TEXT, 
	NTEXT NTEXT, 
	VARCHARMAX VARCHAR(MAX), 
	NVARCHARMAX NVARCHAR(MAX)
)

INSERT TEXTOS 
VALUES 
(
	'AGNALDO', 
	'AGNALDO', 
	'AGNALDO', 
	'AGNALDO', 
	'AGNALDO', 
	'AGNALDO', 
	'AGNALDO', 
	'AGNALDO'
)

SELECT * 
FROM TEXTOS

EXEC SP_HELP TEXTOS

CREATE TABLE OUTROS
(
	GUID UNIQUEIDENTIFIER, 
	VARBINARY VARBINARY(100), 
	BINARY BINARY(100), 
	VARBINARYMAX VARBINARY(MAX), 
	IMAGE IMAGE 	 
)

INSERT OUTROS
VALUES 
(
	NEWID(), 
	PWDENCRYPT('ABC'), 
	PWDENCRYPT('ABC'), 
	PWDENCRYPT('ABC'), 
	PWDENCRYPT('ABC')	
)

SELECT *
FROM OUTROS

CREATE TABLE FUNCIONARIO
(
	HIERARQUIA HIERARCHYID,
	ID_FUNCIONARIO INT,
	NOME_FUNCIONARIO VARCHAR(50),
)

INSERT FUNCIONARIO
VALUES (CAST('/' AS HIERARCHYID), 
	1, 
	'ADÃO') 

SELECT * 
FROM FUNCIONARIO
 
INSERT FUNCIONARIO
VALUES (CAST('/1/' AS HIERARCHYID), 
	2, 
	'CAIM') 

INSERT FUNCIONARIO
VALUES (CAST('/2/' AS HIERARCHYID), 
	3, 
	'ABEL') 

SELECT CAST(HIERARQUIA AS VARCHAR(50)) AS 'HIERARQUIA', 
	* 
FROM FUNCIONARIO
 
INSERT FUNCIONARIO
VALUES (CAST('/1/1/' AS HIERARCHYID), 
	4, 
	'ENOQUE') 

SELECT CAST(HIERARQUIA AS VARCHAR(50)) AS 'HIERARQUIA', 
	*
FROM FUNCIONARIO

SELECT CONVERT(DATETIME, '20130702')
SELECT CONVERT(DATETIME, '2013-07-02 15:01:01.566')
SELECT CONVERT(DATETIME, '2013/07/02 14:59:59')
SELECT CONVERT(SMALLDATETIME, '2013/07/02 14:59:59')
SELECT CONVERT(DATETIME, '02/JUL/2013')
SELECT CONVERT(DATETIME, 'JUL 2 2013')
SELECT CONVERT(DATETIME, 'SET 12 1966') --ERRO
SELECT CONVERT(DATETIME, '31/12/2012') --ERRO
SELECT CONVERT(DATETIME, '12/31/2012')
SELECT CONVERT(DATETIME, '1/2/12')

SELECT 
	PARSE('102.243' AS DEC(9,2)),
	PARSE('102.247' AS DEC(9,2))

SELECT 
	PARSE('2/20/13' AS DATE), 
	PARSE('2/20/13' AS DATETIME), 
	PARSE('20/FEB/2013 09:10:20' AS DATETIME)

SELECT
	PARSE('ERRO' AS INT)

DECLARE @I INT = PARSE('1209' AS INT)
SELECT @I

SELECT 
	TRY_PARSE('102.243' AS DEC(9,2)),
	TRY_PARSE('102.247' AS DEC(9,2))

SELECT 
	TRY_PARSE('2/20/13' AS DATE), 
	TRY_PARSE('2/20/13' AS DATETIME), 
	TRY_PARSE('20/FEB/2013 09:10:20' AS DATETIME)

SELECT
	TRY_PARSE('AGORA É NULL' AS INT)

DECLARE @J INT = TRY_PARSE('1209' AS INT)
SELECT @J

SELECT
	TRY_CONVERT(INT, '435'), 
	TRY_CONVERT(INT, '435.35'), 
	TRY_CONVERT(VARCHAR, 435.35), 
	TRY_CONVERT(DATETIME, '3/20/2013 09:10:20'), 
	TRY_CONVERT(XML, '<numero>435.35</numero>'), 
	TRY_CONVERT(XML, 'QUALQUER COISA')
	
SELECT
	TRY_CONVERT(XML, GETDATE()) 

SELECT
	TRY_CONVERT(XML, 1)

SELECT *
FROM SYS.types

EXEC sp_addtype 'CODIGO', 'INT', 'NOT NULL'

GO

CREATE TYPE PRECO
FROM DECIMAL(9,2)

GO

CREATE TABLE PRODUTO
(
	COD_PRODUTO CODIGO IDENTITY, 
	NOME_PRODUTO VARCHAR(50), 
	PRECO_PRODUTO PRECO	
)

EXEC sp_help PRODUTO

GO

CREATE PROC USP_PRODUTO_BY_COD_PRODUTO
	@COD_PRODUTO CODIGO
AS
	SELECT *
	FROM PRODUTO 
	WHERE COD_PRODUTO = @COD_PRODUTO
GO

DECLARE @X CODIGO
SET @X = 10
SELECT @X

DROP TYPE CODIGO
DROP TYPE PRECO

INSERT PRODUTO
VALUES ('MARTELO', 10)

ALTER TABLE PRODUTO
ALTER COLUMN COD_PRODUTO INT NOT NULL

ALTER TABLE PRODUTO
ALTER COLUMN PRECO_PRODUTO DEC(9, 2) NULL

GO

ALTER PROC USP_PRODUTO_BY_COD_PRODUTO
	@COD_PRODUTO INT
AS
	SELECT *
	FROM PRODUTO 
	WHERE COD_PRODUTO = @COD_PRODUTO
GO

EXEC sp_droptype 'CODIGO'
EXEC sp_droptype 'PRECO'
